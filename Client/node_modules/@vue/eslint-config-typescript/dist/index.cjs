'use strict';

var tseslint = require('typescript-eslint');
var tseslintParser = require('@typescript-eslint/parser');
var pluginVue = require('eslint-plugin-vue');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var tseslint__namespace = /*#__PURE__*/_interopNamespaceDefault(tseslint);
var tseslintParser__namespace = /*#__PURE__*/_interopNamespaceDefault(tseslintParser);

function createConfig({
  extends: configNamesToExtend = ["recommended"],
  supportedScriptLangs = { ts: true, tsx: false, js: false, jsx: false }
} = {}) {
  const mayHaveJsxInSfc = supportedScriptLangs.jsx || supportedScriptLangs.tsx;
  const needsTypeAwareLinting = configNamesToExtend.some(
    (name) => name.includes("TypeChecked") && name !== "disableTypeChecked"
  );
  if (needsTypeAwareLinting && mayHaveJsxInSfc) {
    throw new Error(
      "Type-aware linting is not supported in Vue SFCs with JSX syntax. Please disable type-aware linting or set `supportedScriptLangs.jsx` and `supportedScriptLangs.tsx` to `false`."
    );
  }
  const noProjectServiceForVue = mayHaveJsxInSfc;
  const projectServiceConfigs = [];
  if (noProjectServiceForVue) {
    projectServiceConfigs.push({
      name: "vue-typescript/project-service-for-vue",
      files: ["*.vue", "**/*.vue"],
      languageOptions: {
        parserOptions: {
          projectService: false
        }
      }
    });
  }
  return tseslint__namespace.config(
    ...configNamesToExtend.map((configName) => tseslint__namespace.configs[configName]).flat().map(
      (config) => config.files && config.files.includes("**/*.ts") ? {
        ...config,
        files: [...config.files, "**/*.vue"]
      } : config
    ),
    ...pluginVue.configs["flat/base"],
    {
      name: "vue-typescript/setup",
      files: ["*.vue", "**/*.vue"],
      languageOptions: {
        parserOptions: {
          parser: {
            // Fallback to espree for js/jsx scripts, as well as SFCs without scripts
            // for better performance.
            js: "espree",
            jsx: "espree",
            ts: tseslintParser__namespace,
            tsx: tseslintParser__namespace
            // Leave the template parser unspecified,
            // so that it could be determined by `<script lang="...">`
          },
          // The internal espree version used by vue-eslint-parser is 9.x, which supports ES2024 at most.
          // While the parser may try to load the latest version of espree, it's not guaranteed to work.
          // For example, if npm accidentally hoists the older version to the top of the node_modules,
          // or if the user installs the older version of espree at the project root,
          // the older versions would be used.
          // But ESLint 9 allows setting the ecmaVersion to 2025, which may cause a crash.
          // So we set the ecmaVersion to 2024 here to avoid the potential issue.
          ecmaVersion: 2024,
          ecmaFeatures: {
            jsx: mayHaveJsxInSfc
          },
          extraFileExtensions: ["vue"]
        }
      },
      rules: {
        "vue/block-lang": [
          "error",
          {
            script: {
              lang: Object.keys(supportedScriptLangs).filter(
                (lang) => supportedScriptLangs[lang]
              ),
              allowNoLang: supportedScriptLangs.js
            }
          }
        ]
      }
    },
    ...projectServiceConfigs
  );
}

module.exports = createConfig;
